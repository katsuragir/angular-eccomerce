{"version":3,"sources":["ng://ngx-drag-scroll/lib/ngx-drag-scroll-item.ts","ng://ngx-drag-scroll/lib/ngx-drag-scroll.component.ts","ng://ngx-drag-scroll/lib/ngx-drag-scroll.module.ts"],"names":["DragScrollItemDirective","elementRef","this","display","_dragDisabled","_elementRef","Object","defineProperty","prototype","value","Directive","args","selector","ElementRef","decorators","type","Inject","HostBinding","Input","DragScrollComponent","_renderer","_document","_index","_scrollbarHidden","_disabled","_xDisabled","_xWheelEnabled","_yDisabled","_snapDisabled","_snapOffset","_snapDuration","_isDragging","isPressed","isScrolling","scrollTimer","scrollToTimer","downX","downY","displayType","elWidth","elHeight","_pointerEvents","scrollbarWidth","isAnimating","prevChildrenLength","indexBound","dsInitialized","EventEmitter","indexChanged","reachesLeftBound","reachesRightBound","snapAnimationFinished","dragStart","dragEnd","getScrollbarWidth","emit","ngOnChanges","setScrollBar","xDisabled","disabled","disableScroll","enableScroll","yDisabled","ngAfterViewInit","setAttribute","_contentRef","nativeElement","window","getComputedStyle","setStyle","markElDimension","wrapper","checkScrollbar","_onMouseDownListener","listen","onMouseDownHandler","bind","_onScrollListener","onScrollHandler","_onDragStartListener","e","preventDefault","checkNavStatus","adjustMarginToLastChild","ngAfterViewChecked","_children","length","ngOnDestroy","onMouseMoveHandler","event","onMouseMove","buttons","which","onMouseUpHandler","_setIsDragging","dragDisabled","clientX","scrollLeft","clientY","scrollTop","dragScrollItem","locateDragScrollItem","isTouchEvent","_startGlobalListening","mouseEvent","clearTimeout","_this","snapDisabled","locateCurrentIndex","setTimeout","_stopGlobalListening","moveLeft","currIndex","scrollTo","toChildrenLocation","snapDuration","moveRight","container","parentNode","containerWidth","clientWidth","isScrollReachesRightEnd","maximumIndex","toArray","moveTo","index","Math","min","onlyOneItem","Boolean","containerIsLargerThanContent","scrollWidth","onWheel","scrollBy","deltaY","onWindowResize","refreshWrapperDimensions","_onMouseMoveListener","eventName","_onMouseUpListener","axis","hideScrollbar","style","createElement","addClass","appendChild","showScrollbar","height","removeChild","scrollHeight","clientHeight","scrollbarHidden","outer","body","widthNoScroll","offsetWidth","inner","widthWithScroll","offsetHeight","element","to","duration","self","start","change","snapOffset","currentTime","animateScroll","t","b","c","snap","currentChildWidth","nextChildrenWidth","childrenWidth","idx","stop","cb","shouldBreak","breakFunc","childrenArr","i","currentClildWidth","item","width","childrenElements","count","dragScrollItemDirective","itemWidth","firstElementChild","lastItem","Component","template","Renderer2","DOCUMENT","ViewChild","static","ContentChildren","Output","HostListener","DragScrollModule","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, HostBinding, Inject } from '@angular/core';\n\n@Directive({\n  selector: '[drag-scroll-item]'\n})\nexport class DragScrollItemDirective {\n  @HostBinding('style.display')\n  display = 'inline-block';\n\n  @Input('drag-disabled')\n  get dragDisabled() { return this._dragDisabled; }\n  set dragDisabled(value: boolean) { this._dragDisabled = value; }\n\n  _dragDisabled = false;\n\n  _elementRef: ElementRef;\n\n  constructor(\n    @Inject(ElementRef) elementRef: ElementRef,\n  ) {\n    this._elementRef = elementRef;\n  }\n}\n","import {\n  ElementRef,\n  Component,\n  Renderer2,\n  OnDestroy,\n  Input,\n  Output,\n  AfterViewInit,\n  OnChanges,\n  EventEmitter,\n  ViewChild,\n  ContentChildren,\n  AfterViewChecked,\n  QueryList,\n  Inject,\n  HostBinding,\n  HostListener\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { DragScrollItemDirective } from './ngx-drag-scroll-item';\n\n@Component({\n  selector: 'drag-scroll',\n  template: `\n    <div class=\"drag-scroll-content\" #contentRef>\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [`\n    :host {\n      overflow: hidden;\n      display: block;\n    }\n    .drag-scroll-content {\n      height: 100%;\n      overflow: auto;\n      white-space: nowrap;\n    }\n    `]\n})\nexport class DragScrollComponent implements OnDestroy, AfterViewInit, OnChanges, AfterViewChecked {\n  private _index = 0;\n\n  private _scrollbarHidden = false;\n\n  private _disabled = false;\n\n  private _xDisabled = false;\n\n  private _xWheelEnabled = false;\n\n  private _yDisabled = false;\n\n  private _dragDisabled = false;\n\n  private _snapDisabled = false;\n\n  private _snapOffset = 0;\n\n  private _snapDuration = 500;\n\n  private _isDragging = false;\n\n  private _onMouseMoveListener: Function;\n\n  private _onMouseUpListener: Function;\n\n  private _onMouseDownListener: Function;\n\n  private _onScrollListener: Function;\n\n  private _onDragStartListener: Function;\n\n  /**\n   * Is the user currently pressing the element\n   */\n  isPressed = false;\n\n  /**\n   * Is the user currently scrolling the element\n   */\n  isScrolling = false;\n\n  scrollTimer: number | NodeJS.Timer = -1;\n\n  scrollToTimer: number | NodeJS.Timer = -1;\n\n  /**\n   * Is the user currently dragging the element\n   */\n  get isDragging(): boolean {\n    return this._isDragging;\n  }\n\n  /**\n   * The x coordinates on the element\n   */\n  downX = 0;\n\n  /**\n   * The y coordinates on the element\n   */\n  downY = 0;\n\n  displayType: string | null = 'block';\n\n  elWidth: string | null = null;\n\n  elHeight: string | null = null;\n\n  /**\n   * The parentNode of carousel Element\n   */\n  parentNode: HTMLElement;\n\n  /**\n   * The carousel Element\n   */\n\n  @ViewChild('contentRef', { static: true }) _contentRef: ElementRef;\n\n  @ContentChildren(DragScrollItemDirective) _children: QueryList<DragScrollItemDirective>;\n\n  @HostBinding('style.pointer-events') _pointerEvents = 'auto';\n\n  wrapper: HTMLDivElement | null;\n\n  scrollbarWidth: string | null = null;\n\n  get currIndex() { return this._index; }\n  set currIndex(value) {\n    if (value !== this._index) {\n      this._index = value;\n      this.indexChanged.emit(value);\n    }\n  }\n\n  isAnimating = false;\n\n  prevChildrenLength = 0;\n\n  indexBound = 0;\n\n  @Output() dsInitialized = new EventEmitter<void>();\n\n  @Output() indexChanged = new EventEmitter<number>();\n\n  @Output() reachesLeftBound = new EventEmitter<boolean>();\n\n  @Output() reachesRightBound = new EventEmitter<boolean>();\n\n  @Output() snapAnimationFinished = new EventEmitter<number>();\n\n  @Output() dragStart = new EventEmitter<void>();\n\n  @Output() dragEnd = new EventEmitter<void>();\n\n  /**\n   * Whether the scrollbar is hidden\n   */\n  @Input('scrollbar-hidden')\n  get scrollbarHidden() { return this._scrollbarHidden; }\n  set scrollbarHidden(value: boolean) { this._scrollbarHidden = value; }\n\n  /**\n   * Whether horizontally and vertically draging and scrolling is be disabled\n   */\n  @Input('drag-scroll-disabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = value; }\n\n  /**\n   * Whether horizontally dragging and scrolling is be disabled\n   */\n  @Input('drag-scroll-x-disabled')\n  get xDisabled() { return this._xDisabled; }\n  set xDisabled(value: boolean) { this._xDisabled = value; }\n\n  /**\n   * Whether vertically dragging and scrolling events is disabled\n   */\n  @Input('drag-scroll-y-disabled')\n  get yDisabled() { return this._yDisabled; }\n  set yDisabled(value: boolean) { this._yDisabled = value; }\n\n  /**\n   * Whether scrolling horizontally with mouse wheel is enabled\n   */\n  @Input('scroll-x-wheel-enabled')\n  get xWheelEnabled() { return this._xWheelEnabled; }\n  set xWheelEnabled(value: boolean) { this._xWheelEnabled = value; }\n\n  @Input('drag-disabled')\n  get dragDisabled() { return this._dragDisabled; }\n  set dragDisabled(value: boolean) { this._dragDisabled = value; }\n\n  @Input('snap-disabled')\n  get snapDisabled() { return this._snapDisabled; }\n  set snapDisabled(value: boolean) { this._snapDisabled = value; }\n\n  @Input('snap-offset')\n  get snapOffset() { return this._snapOffset; }\n  set snapOffset(value: number) { this._snapOffset = value; }\n\n  @Input('snap-duration')\n  get snapDuration() { return this._snapDuration; }\n  set snapDuration(value: number) { this._snapDuration = value; }\n\n  constructor(\n    @Inject(ElementRef) private _elementRef: ElementRef,\n    @Inject(Renderer2) private _renderer: Renderer2,\n    @Inject(DOCUMENT) private _document: any\n  ) {\n    this.scrollbarWidth = `${this.getScrollbarWidth()}px`;\n  }\n\n  ngOnChanges() {\n    this.setScrollBar();\n\n    if (this.xDisabled || this.disabled) {\n      this.disableScroll('x');\n    } else {\n      this.enableScroll('x');\n    }\n\n    if (this.yDisabled || this.disabled) {\n      this.disableScroll('y');\n    } else {\n      this.enableScroll('y');\n    }\n  }\n\n  ngAfterViewInit() {\n    // auto assign computed css\n    this._renderer.setAttribute(this._contentRef.nativeElement, 'drag-scroll', 'true');\n\n    this.displayType = typeof window !== 'undefined' ? window.getComputedStyle(this._elementRef.nativeElement).display : 'block';\n\n    this._renderer.setStyle(this._contentRef.nativeElement, 'display', this.displayType);\n    this._renderer.setStyle(this._contentRef.nativeElement, 'whiteSpace', 'noWrap');\n\n    // store ele width height for later user\n    this.markElDimension();\n\n    this._renderer.setStyle(this._contentRef.nativeElement, 'width', this.elWidth);\n    this._renderer.setStyle(this._contentRef.nativeElement, 'height', this.elHeight);\n\n    if (this.wrapper) {\n      this.checkScrollbar();\n    }\n\n    this._onMouseDownListener = this._renderer.listen(this._contentRef.nativeElement, 'mousedown', this.onMouseDownHandler.bind(this));\n    this._onScrollListener = this._renderer.listen(this._contentRef.nativeElement, 'scroll', this.onScrollHandler.bind(this));\n    // prevent Firefox from dragging images\n    this._onDragStartListener = this._renderer.listen('document', 'dragstart', (e) => {\n      e.preventDefault();\n    });\n    this.checkNavStatus();\n    this.dsInitialized.emit();\n    this.adjustMarginToLastChild();\n  }\n\n  ngAfterViewChecked() {\n    // avoid extra checks\n    if (this._children.length !== this.prevChildrenLength) {\n      this.markElDimension();\n      this.checkScrollbar();\n      this.prevChildrenLength = this._children.length;\n      this.checkNavStatus();\n    }\n  }\n\n  ngOnDestroy() {\n    this._renderer.setAttribute(this._contentRef.nativeElement, 'drag-scroll', 'false');\n    if (this._onMouseDownListener) {\n      this._onMouseDownListener = this._onMouseDownListener();\n    }\n    if (this._onScrollListener) {\n      this._onScrollListener = this._onScrollListener();\n    }\n    if (this._onDragStartListener) {\n      this._onDragStartListener = this._onDragStartListener();\n    }\n  }\n\n  onMouseMoveHandler(event: MouseEvent) {\n    this.onMouseMove(event);\n  }\n\n  onMouseMove(event: MouseEvent) {\n    if (this.isPressed && !this.disabled) {\n      // Workaround for prevent scroll stuck if browser lost focus\n      // MouseEvent.buttons not support by Safari\n      // tslint:disable-next-line:deprecation\n      if (!event.buttons && !event.which) {\n        return this.onMouseUpHandler(event);\n      }\n\n      this._pointerEvents = 'none';\n      this._setIsDragging(true);\n\n      // Drag X\n      if (!this.xDisabled && !this.dragDisabled) {\n        const clientX = (event as MouseEvent).clientX;\n        this._contentRef.nativeElement.scrollLeft =\n          this._contentRef.nativeElement.scrollLeft - clientX + this.downX;\n        this.downX = clientX;\n      }\n\n      // Drag Y\n      if (!this.yDisabled && !this.dragDisabled) {\n        const clientY = (event as MouseEvent).clientY;\n        this._contentRef.nativeElement.scrollTop =\n          this._contentRef.nativeElement.scrollTop - clientY + this.downY;\n        this.downY = clientY;\n      }\n    }\n  }\n\n  onMouseDownHandler(event: MouseEvent) {\n    const dragScrollItem: DragScrollItemDirective | null = this.locateDragScrollItem(event.target as Element);\n    if (dragScrollItem && dragScrollItem.dragDisabled) {\n      return;\n    }\n\n    const isTouchEvent = event.type === 'touchstart';\n\n    this._startGlobalListening(isTouchEvent);\n    this.isPressed = true;\n\n    const mouseEvent = event as MouseEvent;\n    this.downX = mouseEvent.clientX;\n    this.downY = mouseEvent.clientY;\n\n    clearTimeout(this.scrollToTimer as number);\n  }\n\n  onScrollHandler() {\n    this.checkNavStatus();\n    if (!this.isPressed && !this.isAnimating && !this.snapDisabled) {\n      this.isScrolling = true;\n      clearTimeout(this.scrollTimer as number);\n      this.scrollTimer = setTimeout(() => {\n        this.isScrolling = false;\n        this.locateCurrentIndex(true);\n      }, 500);\n    } else {\n      this.locateCurrentIndex();\n    }\n  }\n\n  onMouseUpHandler(event: MouseEvent) {\n    if (this.isPressed) {\n      this.isPressed = false;\n      this._pointerEvents = 'auto';\n      this._setIsDragging(false);\n      if (!this.snapDisabled) {\n        this.locateCurrentIndex(true);\n      } else {\n        this.locateCurrentIndex();\n      }\n      this._stopGlobalListening();\n    }\n  }\n\n  /*\n   * Nav button\n   */\n  moveLeft() {\n    if ((this.currIndex !== 0 || this.snapDisabled)) {\n      this.currIndex--;\n      clearTimeout(this.scrollToTimer as number);\n      this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);\n    }\n  }\n\n  moveRight() {\n    const container = this.wrapper || this.parentNode;\n    const containerWidth = container ? container.clientWidth : 0;\n\n    if (!this.isScrollReachesRightEnd() && this.currIndex < this.maximumIndex(containerWidth, this._children.toArray())) {\n      this.currIndex++;\n      clearTimeout(this.scrollToTimer as number);\n      this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);\n    }\n  }\n\n  moveTo(index: number) {\n    const container = this.wrapper || this.parentNode;\n    const containerWidth = container ? container.clientWidth : 0;\n    if (\n      index >= 0 &&\n      index !== this.currIndex &&\n      this.currIndex <= this.maximumIndex(containerWidth, this._children.toArray())\n    ) {\n      this.currIndex = Math.min(index, this.maximumIndex(containerWidth, this._children.toArray()));\n      clearTimeout(this.scrollToTimer as number);\n      this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);\n    }\n  }\n\n  checkNavStatus() {\n    setTimeout(() => {\n      const onlyOneItem = Boolean(this._children.length <= 1);\n      const containerIsLargerThanContent = Boolean(this._contentRef.nativeElement.scrollWidth <=\n        this._contentRef.nativeElement.clientWidth);\n      if (onlyOneItem || containerIsLargerThanContent) {\n        // only one element\n        this.reachesLeftBound.emit(true);\n        this.reachesRightBound.emit(true);\n      } else if (this.isScrollReachesRightEnd()) {\n        // reached right end\n        this.reachesLeftBound.emit(false);\n        this.reachesRightBound.emit(true);\n      } else if (this._contentRef.nativeElement.scrollLeft === 0 &&\n        this._contentRef.nativeElement.scrollWidth > this._contentRef.nativeElement.clientWidth) {\n        // reached left end\n        this.reachesLeftBound.emit(true);\n        this.reachesRightBound.emit(false);\n      } else {\n        // in the middle\n        this.reachesLeftBound.emit(false);\n        this.reachesRightBound.emit(false);\n      }\n    }, 0);\n  }\n\n  @HostListener('wheel', ['$event'])\n  public onWheel(event: WheelEvent) {\n    if (this._xWheelEnabled) {\n      event.preventDefault();\n\n      if (this._snapDisabled) {\n        this._contentRef.nativeElement.scrollBy(event.deltaY, 0);\n      } else {\n        if (event.deltaY < 0) {\n          this.moveLeft();\n        } else if (event.deltaY > 0) {\n          this.moveRight();\n        }\n      }\n    }\n  }\n\n  @HostListener('window:resize')\n  public onWindowResize() {\n    this.refreshWrapperDimensions();\n  }\n\n  private _setIsDragging(value: boolean) {\n    if (this._isDragging === value) {\n      return;\n    }\n\n    this._isDragging = value;\n    value ? this.dragStart.emit() : this.dragEnd.emit();\n  }\n\n  private _startGlobalListening(isTouchEvent: boolean) {\n    if (!this._onMouseMoveListener) {\n      const eventName = isTouchEvent ? 'touchmove' : 'mousemove';\n      this._onMouseMoveListener = this._renderer.listen('document', eventName, this.onMouseMoveHandler.bind(this));\n    }\n\n    if (!this._onMouseUpListener) {\n      const eventName = isTouchEvent ? 'touchend' : 'mouseup';\n      this._onMouseUpListener = this._renderer.listen('document', eventName, this.onMouseUpHandler.bind(this));\n    }\n  }\n\n  private _stopGlobalListening() {\n    if (this._onMouseMoveListener) {\n      this._onMouseMoveListener = this._onMouseMoveListener();\n    }\n\n    if (this._onMouseUpListener) {\n      this._onMouseUpListener = this._onMouseUpListener();\n    }\n  }\n\n  private disableScroll(axis: string): void {\n    this._renderer.setStyle(this._contentRef.nativeElement, `overflow-${axis}`, 'hidden');\n  }\n\n  private enableScroll(axis: string): void {\n    this._renderer.setStyle(this._contentRef.nativeElement, `overflow-${axis}`, 'auto');\n  }\n\n  private hideScrollbar(): void {\n    if (this._contentRef.nativeElement.style.display !== 'none' && !this.wrapper) {\n      this.parentNode = this._contentRef.nativeElement.parentNode;\n\n      // create container element\n      this.wrapper = this._renderer.createElement('div');\n      this._renderer.setAttribute(this.wrapper, 'class', 'drag-scroll-wrapper');\n      this._renderer.addClass(this.wrapper, 'drag-scroll-container');\n\n      this.refreshWrapperDimensions();\n\n      this._renderer.setStyle(this.wrapper, 'overflow', 'hidden');\n\n      this._renderer.setStyle(this._contentRef.nativeElement, 'width', `calc(100% + ${this.scrollbarWidth})`);\n      this._renderer.setStyle(this._contentRef.nativeElement, 'height', `calc(100% + ${this.scrollbarWidth})`);\n\n      // Append container element to component element.\n      this._renderer.appendChild(this._elementRef.nativeElement, this.wrapper);\n\n      // Append content element to container element.\n      this._renderer.appendChild(this.wrapper, this._contentRef.nativeElement);\n\n      this.adjustMarginToLastChild();\n    }\n  }\n\n  private showScrollbar(): void {\n    if (this.wrapper) {\n      this._renderer.setStyle(this._contentRef.nativeElement, 'width', '100%');\n      this._renderer.setStyle(this._contentRef.nativeElement, 'height', this.wrapper.style.height);\n      if (this.parentNode !== null) {\n        this.parentNode.removeChild(this.wrapper);\n        this.parentNode.appendChild(this._contentRef.nativeElement);\n      }\n      this.wrapper = null;\n\n      this.adjustMarginToLastChild();\n    }\n  }\n\n  private checkScrollbar() {\n    if (this._contentRef.nativeElement.scrollWidth <= this._contentRef.nativeElement.clientWidth) {\n      this._renderer.setStyle(this._contentRef.nativeElement, 'height', '100%');\n    } else {\n      this._renderer.setStyle(this._contentRef.nativeElement, 'height', `calc(100% + ${this.scrollbarWidth})`);\n    }\n    if (this._contentRef.nativeElement.scrollHeight <= this._contentRef.nativeElement.clientHeight) {\n      this._renderer.setStyle(this._contentRef.nativeElement, 'width', '100%');\n    } else {\n      this._renderer.setStyle(this._contentRef.nativeElement, 'width', `calc(100% + ${this.scrollbarWidth})`);\n    }\n  }\n\n  private setScrollBar(): void {\n    if (this.scrollbarHidden) {\n      this.hideScrollbar();\n    } else {\n      this.showScrollbar();\n    }\n  }\n\n  private getScrollbarWidth(): number {\n    /**\n     * Browser Scrollbar Widths (2016)\n     * OSX (Chrome, Safari, Firefox) - 15px\n     * Windows XP (IE7, Chrome, Firefox) - 17px\n     * Windows 7 (IE10, IE11, Chrome, Firefox) - 17px\n     * Windows 8.1 (IE11, Chrome, Firefox) - 17px\n     * Windows 10 (IE11, Chrome, Firefox) - 17px\n     * Windows 10 (Edge 12/13) - 12px\n     */\n    const outer = this._renderer.createElement('div');\n    this._renderer.setStyle(outer, 'visibility', 'hidden');\n    this._renderer.setStyle(outer, 'width', '100px');\n    this._renderer.setStyle(outer, 'msOverflowStyle', 'scrollbar');  // needed for WinJS apps\n    // document.body.appendChild(outer);\n    this._renderer.appendChild(this._document.body, outer);\n    // this._renderer.appendChild(this._renderer.selectRootElement('body'), outer);\n    const widthNoScroll = outer.offsetWidth;\n    // force scrollbars\n    this._renderer.setStyle(outer, 'overflow', 'scroll');\n\n    // add innerdiv\n    const inner = this._renderer.createElement('div');\n    this._renderer.setStyle(inner, 'width', '100%');\n    this._renderer.appendChild(outer, inner);\n\n    const widthWithScroll = inner.offsetWidth;\n\n    // remove divs\n    this._renderer.removeChild(this._document.body, outer);\n\n    /**\n     * Scrollbar width will be 0 on Mac OS with the\n     * default \"Only show scrollbars when scrolling\" setting (Yosemite and up).\n     * setting default width to 20;\n     */\n    return widthNoScroll - widthWithScroll || 20;\n  }\n\n  private refreshWrapperDimensions() {\n    if (this.wrapper) {\n      this._renderer.setStyle(this.wrapper, 'width', '100%');\n      this._renderer.setStyle(this.wrapper, 'height', this._elementRef.nativeElement.style.height\n        || this._elementRef.nativeElement.offsetHeight + 'px');\n    }\n  }\n\n  /*\n  * The below solution is heavily inspired from\n  * https://gist.github.com/andjosh/6764939\n  */\n  private scrollTo(element: Element, to: number, duration: number) {\n    const self = this;\n    self.isAnimating = true;\n    const start = element.scrollLeft,\n      change = to - start - this.snapOffset,\n      increment = 20;\n    let currentTime = 0;\n\n    // t = current time\n    // b = start value\n    // c = change in value\n    // d = duration\n    const easeInOutQuad = function (t: number, b: number, c: number, d: number) {\n      t /= d / 2;\n      if (t < 1) {\n        return c / 2 * t * t + b;\n      }\n      t--;\n      return -c / 2 * (t * (t - 2) - 1) + b;\n    };\n\n    const animateScroll = function () {\n      currentTime += increment;\n      element.scrollLeft = easeInOutQuad(currentTime, start, change, duration);\n      if (currentTime < duration) {\n        self.scrollToTimer = setTimeout(animateScroll, increment);\n      } else {\n        // run one more frame to make sure the animation is fully finished\n        setTimeout(() => {\n          self.isAnimating = false;\n          self.snapAnimationFinished.emit(self.currIndex);\n        }, increment);\n      }\n    };\n    animateScroll();\n  }\n\n  private locateCurrentIndex(snap?: boolean) {\n    this.currentChildWidth((currentChildWidth, nextChildrenWidth, childrenWidth, idx: number, stop) => {\n      if (\n        (this._contentRef.nativeElement.scrollLeft >= childrenWidth &&\n          this._contentRef.nativeElement.scrollLeft <= nextChildrenWidth)\n      ) {\n        if (nextChildrenWidth - this._contentRef.nativeElement.scrollLeft > currentChildWidth / 2 && !this.isScrollReachesRightEnd()) {\n          // roll back scrolling\n          if (!this.isAnimating) {\n            this.currIndex = idx;\n          }\n          if (snap) {\n            this.scrollTo(this._contentRef.nativeElement, childrenWidth, this.snapDuration);\n          }\n        } else if (this._contentRef.nativeElement.scrollLeft !== 0) {\n          // forward scrolling\n          if (!this.isAnimating) {\n            this.currIndex = idx + 1;\n          }\n          if (snap) {\n            this.scrollTo(this._contentRef.nativeElement, childrenWidth + currentChildWidth, this.snapDuration);\n          }\n        }\n        stop();\n      } else if ((idx + 1) === (this._children.length - 1)) {\n        // reaches last index\n        if (!this.isAnimating) {\n          this.currIndex = idx + 1;\n        }\n        stop();\n      }\n    });\n  }\n\n  private currentChildWidth(cb: (\n    currentClildWidth: number,\n    nextChildrenWidth: number,\n    childrenWidth: number,\n    index: number,\n    breakFunc: () => void) => void) {\n    let childrenWidth = 0;\n    let shouldBreak = false;\n    const breakFunc = function () {\n      shouldBreak = true;\n    };\n    const childrenArr = this._children.toArray();\n\n    for (let i = 0; i < childrenArr.length; i++) {\n      if (i === childrenArr.length - 1) {\n        break;\n      }\n      if (shouldBreak) {\n        break;\n      }\n\n      const nextChildrenWidth = childrenWidth + childrenArr[i + 1]._elementRef.nativeElement.clientWidth;\n      const currentClildWidth = childrenArr[i]._elementRef.nativeElement.clientWidth;\n      cb(currentClildWidth, nextChildrenWidth, childrenWidth, i, breakFunc);\n\n      childrenWidth += currentClildWidth;\n    }\n  }\n\n  private toChildrenLocation(): number {\n    let to = 0;\n    const childrenArr = this._children.toArray();\n    for (let i = 0; i < this.currIndex; i++) {\n      to += childrenArr[i]._elementRef.nativeElement.clientWidth;\n    }\n    return to;\n  }\n\n  private locateDragScrollItem(element: Element): DragScrollItemDirective | null {\n    let item: DragScrollItemDirective | null = null;\n    const childrenArr = this._children.toArray();\n    for (let i = 0; i < childrenArr.length; i++) {\n      if (element === childrenArr[i]._elementRef.nativeElement) {\n        item = childrenArr[i];\n      }\n    }\n    return item;\n  }\n\n  private markElDimension() {\n    if (this.wrapper) {\n      this.elWidth = this.wrapper.style.width;\n      this.elHeight = this.wrapper.style.height;\n    } else {\n      this.elWidth = this._elementRef.nativeElement.style.width || (this._elementRef.nativeElement.offsetWidth + 'px');\n      this.elHeight = this._elementRef.nativeElement.style.height || (this._elementRef.nativeElement.offsetHeight + 'px');\n    }\n    const container = this.wrapper || this.parentNode;\n    const containerWidth = container ? container.clientWidth : 0;\n    if (this._children.length > 1) {\n      this.indexBound =  this.maximumIndex(containerWidth, this._children.toArray());\n    }\n  }\n\n  private maximumIndex(containerWidth: number, childrenElements: DragScrollItemDirective[]): number {\n    let count = 0;\n    let childrenWidth = 0;\n    for (let i = 0; i <= childrenElements.length; i++) {\n      // last N element\n      const dragScrollItemDirective: DragScrollItemDirective = childrenElements[childrenElements.length - 1 - i];\n      if (!dragScrollItemDirective) {\n        break;\n      } else {\n        const nativeElement = dragScrollItemDirective._elementRef.nativeElement;\n        let itemWidth = nativeElement.clientWidth;\n        if (itemWidth === 0 && nativeElement.firstElementChild) {\n          itemWidth = dragScrollItemDirective._elementRef.nativeElement.firstElementChild.clientWidth;\n        }\n        childrenWidth += itemWidth;\n        if (childrenWidth < containerWidth) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n    return childrenElements.length - count;\n  }\n\n  private isScrollReachesRightEnd(): boolean {\n    const scrollLeftPos = this._contentRef.nativeElement.scrollLeft + this._contentRef.nativeElement.offsetWidth;\n    return scrollLeftPos >= this._contentRef.nativeElement.scrollWidth;\n  }\n\n  /**\n   * adds a margin right style to the last child element which will resolve the issue\n   * of last item gets cutoff.\n   */\n  private adjustMarginToLastChild(): void {\n    if (this._children && this._children.length > 0 && this.hideScrollbar) {\n      const childrenArr = this._children.toArray();\n      const lastItem = childrenArr[childrenArr.length - 1]._elementRef.nativeElement;\n      if (this.wrapper && childrenArr.length > 1) {\n        this._renderer.setStyle(lastItem, 'margin-right', this.scrollbarWidth);\n      } else {\n        this._renderer.setStyle(lastItem, 'margin-right', 0);\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { DragScrollComponent } from './ngx-drag-scroll.component';\nimport { DragScrollItemDirective } from './ngx-drag-scroll-item';\n\n@NgModule({\n  exports: [\n    DragScrollComponent,\n    DragScrollItemDirective\n  ],\n  declarations: [\n    DragScrollComponent,\n    DragScrollItemDirective\n  ]\n})\nexport class DragScrollModule { }\n"]}